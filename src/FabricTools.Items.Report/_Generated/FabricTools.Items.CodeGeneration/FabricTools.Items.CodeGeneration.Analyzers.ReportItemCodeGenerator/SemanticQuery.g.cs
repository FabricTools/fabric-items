//----------------------
// <auto-generated>
//     Generated using FabricTools.Items.CodeGeneration 1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0) (http://github.com/FabricTools)
// </auto-generated>
//----------------------


#nullable enable


namespace FabricTools.Items.Report.Definitions;

#pragma warning disable // Disable all warnings

/// <summary>
/// Defines a filter element as a partial query structure
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:FilterDefinition")]
public partial class FilterDefinition
{
    /// <summary>
    /// Version of the query
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double? Version { get; set; } = default!;

    /// <summary>
    /// Set of tables from which the data will be picked.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("From", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<EntitySource> From { get; set; } = new System.Collections.ObjectModel.Collection<EntitySource>();

    /// <summary>
    /// Set of filters to apply to the data.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Where", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<QueryFilter> Where { get; set; } = new System.Collections.ObjectModel.Collection<QueryFilter>();


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryFilter")]
public partial class QueryFilter
{
    /// <summary>
    /// Set of expressions over which the condition applies. Applied to the set of all non-aggregate, non-measure expressions in the Select if not specified.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<QueryExpressionContainer>? Target { get; set; } = default!;

    /// <summary>
    /// Condition to apply to the target. Must be an expression that evaluates to a boolean.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Condition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Condition { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// Auxillary metadata for this filter.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Annotations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken>? Annotations { get; set; } = default!;


}

/// <summary>
/// Holds a single expression and associated metadata.
/// <br/>Name, NativeReferenceName, and Annotations may be specified for any expression.
/// <br/>Each other property represents a specific type of expression and exactly one of these other properties must be specified.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryExpressionContainer")]
public partial class QueryExpressionContainer
{
    /// <summary>
    /// The name by which the expression can be referenced
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string? Name { get; set; } = default!;

    /// <summary>
    /// The name by which the expression can be referenced in native expressions.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("NativeReferenceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string? NativeReferenceName { get; set; } = default!;

    /// <summary>
    /// Auxiliary metadata for this expression.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Annotations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken>? Annotations { get; set; } = default!;

    /// <summary>
    /// The SourceRef element contains an expression which is reference to a source table in the query or the data.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("SourceRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public AnyOfTypes.AnyOf<StandaloneSourceRefExpression, QuerySourceRefExpression>? SourceRef { get; set; } = default!;

    /// <summary>
    /// The Column element contains an expression which is a reference to a column in a source table.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Column", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryColumnExpression? Column { get; set; } = default!;

    /// <summary>
    /// The Measure element contains an expression which is a reference to a measure in a source table.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryMeasureExpression? Measure { get; set; } = default!;

    /// <summary>
    /// The Min element contains an expression whose min aggregation needs to be computed.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Min", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryMinExpression? Min { get; set; } = default!;

    /// <summary>
    /// The Max element contains an expression whose max aggregation needs to be computed.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Max", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryMaxExpression? Max { get; set; } = default!;

    /// <summary>
    /// The Aggregation element contains an expression which is an aggregation of an expression.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Aggregation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryAggregationExpression? Aggregation { get; set; } = default!;

    /// <summary>
    /// The Percentile element contains an expression which computes a percentile of an expression.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Percentile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryPercentileExpression? Percentile { get; set; } = default!;

    /// <summary>
    /// Hierarchy is an element which represents a reference to a hierarchy in a source table.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Hierarchy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryHierarchyExpression? Hierarchy { get; set; } = default!;

    /// <summary>
    /// HierarchyLevel is an element which represents a reference to a hierarchy level in a hierarchy.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("HierarchyLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryHierarchyLevelExpression? HierarchyLevel { get; set; } = default!;

    /// <summary>
    /// PropertyVariationSource is an element which represents a reference to a source of variations associated with a property.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("PropertyVariationSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryPropertyVariationSourceExpression? PropertyVariationSource { get; set; } = default!;

    /// <summary>
    /// Subquery is an element which holds a query.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Subquery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QuerySubqueryExpression? Subquery { get; set; } = default!;

    /// <summary>
    /// Transforms a continuous space of numerical values into a discrete space of numerical values.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Discretize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryDiscretizeExpression? Discretize { get; set; } = default!;

    /// <summary>
    /// The And element contains an expression which represents an "and" between two expressions that evaluate to a boolean value.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("And", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryBinaryExpression? And { get; set; } = default!;

    /// <summary>
    /// The Between element contains an expression which is a comparison between an expression and two bounds.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Between", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryBetweenExpression? Between { get; set; } = default!;

    /// <summary>
    /// The In element contains an expression which is a comparison between an ordered list of expressions and a set of ordered lists of values.
    /// <br/>If the tuple defined in Expressions matches any tuple defined in Values, then In returns true.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("In", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryInExpression? In { get; set; } = default!;

    /// <summary>
    /// The And element contains an expression which represents an "or" between two expressions that evaluate to a boolean value.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Or", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryBinaryExpression? Or { get; set; } = default!;

    /// <summary>
    /// The Comparison element contains an expression which is a comparison between two expressions.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Comparison", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryComparisonExpression? Comparison { get; set; } = default!;

    /// <summary>
    /// The Not element contains an expression which represents a "not" of an expression that evaluate to a boolean value.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Not", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryNotExpression? Not { get; set; } = default!;

    /// <summary>
    /// The Contains element contains an expression which is a "contains" comparison between two expressions.
    /// <br/>The operation is case insensitive and accent sensitive.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Contains", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryContainsExpression? Contains { get; set; } = default!;

    /// <summary>
    /// The StartsWith element contains an expression which is a "starts with" comparison between two expressions.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("StartsWith", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryStartsWithExpression? StartsWith { get; set; } = default!;

    /// <summary>
    /// The Exists element contains an expression which represents confirming the existence of at least one instance of an expression.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Exists", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryExistsExpression? Exists { get; set; } = default!;

    /// <summary>
    /// The Literal element contains an expression which is a literal value.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Literal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryLiteralExpression? Literal { get; set; } = default!;

    /// <summary>
    /// The DateSpan element contains an expression which is a datespan calculation of an expression.
    /// <br/>A DateSpan can be compared directly to a Date via Comparison or Between.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("DateSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryDateSpanExpression? DateSpan { get; set; } = default!;

    /// <summary>
    /// The DateAdd element contains an expression which is a dateadd calculation of an expression.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("DateAdd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryDateAddExpression? DateAdd { get; set; } = default!;

    /// <summary>
    /// The Now element contains an expression which returns the current date and time.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Now", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryNowExpression? Now { get; set; } = default!;

    /// <summary>
    /// The DefaultValue element represents the model-defined default value for a column.
    /// <br/>It may only be used as the Right expression in a Comparison expression with a ComparisonKind of Equal.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryDefaultValueExpression? DefaultValue { get; set; } = default!;

    /// <summary>
    /// The AnyValue element represents a wildcard value that will match any value in a column.
    /// <br/>It may only be used as the Right expression in a Comparison expression with a ComparisonKind of Equal.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("AnyValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryAnyValueExpression? AnyValue { get; set; } = default!;

    /// <summary>
    /// The Arithmetic element contains an expression which is an arithmetic operation on two expressions.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Arithmetic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryArithmeticExpression? Arithmetic { get; set; } = default!;

    /// <summary>
    /// The Floor element represents an operation to round the specified expression toward zero to a multiple of the specified size.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Floor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryFloorExpression? Floor { get; set; } = default!;

    /// <summary>
    /// ScopedEval is an element which evaluates an expression in a specified scope.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ScopedEval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryScopedEvalExpression? ScopedEval { get; set; } = default!;

    /// <summary>
    /// The FilteredEval element contains a set of filters to apply to the measure.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("FilteredEval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryFilteredEvalExpression? FilteredEval { get; set; } = default!;

    /// <summary>
    /// The TransformTableRef element contains an expression which is reference to a TransformTable in the query.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("TransformTableRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryTransformTableRefExpression? TransformTableRef { get; set; } = default!;

    /// <summary>
    /// The TransformOutputRoleRef element contains an expression which is reference to a column produced by a Transform algorithm.
    /// <br/>The reference is resolved by the Role attached to the output column by the transform.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("TransformOutputRoleRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryTransformOutputRoleRefExpression? TransformOutputRoleRef { get; set; } = default!;

    /// <summary>
    /// Used to represent the data behind a sparkline. The data returned will be JSON formatted X/Y value pairs.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("SparklineData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QuerySparklineDataExpression? SparklineData { get; set; } = default!;

    /// <summary>
    /// The NativeVisualCalculation element represents invocation of an expression defined using an expression in an underlying query language.
    /// <br/>The expression should be invoked in the Visual Calculation Context for this query.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("NativeVisualCalculation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryNativeVisualCalc? NativeVisualCalculation { get; set; } = default!;

    /// <summary>
    /// The FillRule element represents an operation to apply a dynamic fill operation.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("FillRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryFillRuleExpression? FillRule { get; set; } = default!;

    /// <summary>
    /// The GroupRef element contains an expression which is a reference to a model grouping column.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("GroupRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryGroupRefExpression? GroupRef { get; set; } = default!;

    /// <summary>
    /// The ResourcePackageItem element contains an expression which references a ResourcePackage item.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ResourcePackageItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryResourcePackageItem? ResourcePackageItem { get; set; } = default!;

    /// <summary>
    /// The RoleRef element contains an expression which is a reference to a named Role defined by a Visual.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("RoleRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryRoleRefExpression? RoleRef { get; set; } = default!;

    /// <summary>
    /// The SumaryValueRef element contains an expression which is a reference to a summary value in Insights Summary.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("SummaryValueRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QuerySummaryValueRefExpression? SummaryValueRef { get; set; } = default!;

    /// <summary>
    /// The AllRolesRef element is used to reference all the roles in a visual.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("AllRolesRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryAllRolesRefExpression? AllRolesRef { get; set; } = default!;

    /// <summary>
    /// The SelectRef element contains an expression which is a reference to a named item in the select clause of the query.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("SelectRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QuerySelectRefExpression? SelectRef { get; set; } = default!;

    /// <summary>
    /// The ThemeDataColor element represents an operation to select a color from a theme.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ThemeDataColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryThemeDataColorExpression? ThemeDataColor { get; set; } = default!;

    /// <summary>
    /// The Conditional element represents an operation to select between several possible cases or an optional default.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Conditional", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryConditionalExpression? Conditional { get; set; } = default!;

    /// <summary>
    /// The NativeMeasure element represents invocation of a measure defined using an expression in an underlying query language.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("NativeMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryNativeMeasure? NativeMeasure { get; set; } = default!;

    /// <summary>
    /// The NativeColumn element represents invocation of a column defined using an expression in an underlying query language.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("NativeColumn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryNativeColumn? NativeColumn { get; set; } = default!;

    /// <summary>
    /// The VisualTopN element represents a type of filter that limits the amount of data points returned in a query
    /// </summary>
    [Newtonsoft.Json.JsonProperty("VisualTopN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryVisualTopNExpression? VisualTopN { get; set; } = default!;



    private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryVisualTopNExpression")]
public partial class QueryVisualTopNExpression
{
    [Newtonsoft.Json.JsonProperty("ItemCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double ItemCount { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryNativeColumn")]
public partial class QueryNativeColumn
{
    /// <summary>
    /// The expected result data type of the native expression.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("DataType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double DataType { get; set; } = default!;

    /// <summary>
    /// The expression to evaluate.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Expression { get; set; } = default!;

    /// <summary>
    /// The name of the underlying query language used to define Expression.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Language", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Language { get; set; } = default!;

    /// <summary>
    /// Defines the table that this column should be considered as part of.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Source { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// Holds metadata about the expression content.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ExpressionContentCache", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryExpressionContentCache? ExpressionContentCache { get; set; } = default!;

    /// <summary>
    /// The preferred name that should be used if the expression needs to be associated with a name in order to be evaluated.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ProposedName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string? ProposedName { get; set; } = default!;

    /// <summary>
    /// The format string that should be applied to the result of evaluating the expression.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string? Format { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryExpressionContentCache")]
public partial class QueryExpressionContentCache
{
    [Newtonsoft.Json.JsonProperty("Dependencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<QueryExpressionContainer>? Dependencies { get; set; } = default!;

    [Newtonsoft.Json.JsonProperty("UnrecognizedIdentifiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? UnrecognizedIdentifiers { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryNativeMeasure")]
public partial class QueryNativeMeasure
{
    /// <summary>
    /// The expected result data type of the native expression.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("DataType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double DataType { get; set; } = default!;

    /// <summary>
    /// The expression to evaluate.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Expression { get; set; } = default!;

    /// <summary>
    /// The name of the underlying query language used to define Expression.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Language", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Language { get; set; } = "dax";

    /// <summary>
    /// Holds metadata about the expression content.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ExpressionContentCache", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryExpressionContentCache? ExpressionContentCache { get; set; } = default!;

    /// <summary>
    /// The preferred name that should be used if the expression needs to be associated with a name in order to be evaluated.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ProposedName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string? ProposedName { get; set; } = default!;

    /// <summary>
    /// The format string that should be applied to the result of evaluating the expression.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string? Format { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryConditionalExpression")]
public partial class QueryConditionalExpression
{
    /// <summary>
    /// Cases are considered in the specified order.
    /// <br/>The result is the Case.Value of the first case where Case.Condition evaluates to true.
    /// <br/>If no Case.Condition evaluates to true, the result is the DefaultValue, if DefaultValue is specified.
    /// <br/>Otherwise, the result is null.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Cases", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<QueryCase> Cases { get; set; } = new System.Collections.ObjectModel.Collection<QueryCase>();

    /// <summary>
    /// An optional value to return when no case evaluates to true.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryExpressionContainer? DefaultValue { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryCase")]
public partial class QueryCase
{
    /// <summary>
    /// An expression producing a boolean indicating whether or not to match this Case.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Condition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Condition { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// An expression producing the result when this case is matched.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Value { get; set; } = new QueryExpressionContainer();


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryThemeDataColorExpression")]
public partial class QueryThemeDataColorExpression
{
    /// <summary>
    /// The theme color to select.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ColorId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double ColorId { get; set; } = default!;

    [Newtonsoft.Json.JsonProperty("Percent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Percent { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QuerySelectRefExpression")]
public partial class QuerySelectRefExpression
{
    /// <summary>
    /// The Name of the ExpressionContainer from Select of the QueryDefinition.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ExpressionName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string ExpressionName { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryAllRolesRefExpression")]
public partial class QueryAllRolesRefExpression
{

}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QuerySummaryValueRefExpression")]
public partial class QuerySummaryValueRefExpression
{
    /// <summary>
    /// The Name of the summary value within a summary template.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryRoleRefExpression")]
public partial class QueryRoleRefExpression
{
    /// <summary>
    /// The Name of the desired Role within a Visual.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Role", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Role { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryResourcePackageItem")]
public partial class QueryResourcePackageItem
{
    /// <summary>
    /// Identifies the ResourcePackage.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("PackageName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string PackageName { get; set; } = default!;

    /// <summary>
    /// Identifies the type of resource package.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("PackageType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double PackageType { get; set; } = default!;

    /// <summary>
    /// Identifies the item within the resource package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ItemName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string ItemName { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryGroupRefExpression")]
public partial class QueryGroupRefExpression
{
    /// <summary>
    /// The underlying columns for the desired grouping.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("GroupedColumns", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<QueryExpressionContainer> GroupedColumns { get; set; } = new System.Collections.ObjectModel.Collection<QueryExpressionContainer>();

    /// <summary>
    /// Reference to the source table containing the property. Must be a SourceRef, PropertyVariationSource, or TransformTableRef expression.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Expression { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// The name of the target property in the source.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Property", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Property { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryFillRuleExpression")]
public partial class QueryFillRuleExpression
{
    /// <summary>
    /// The expression providing the input value to the rule.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Input", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Input { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// Describes the algorithm, and associated parameters, needed to convert the Input into the desired fill.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("FillRule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public Newtonsoft.Json.Linq.JToken FillRule { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryNativeVisualCalc")]
public partial class QueryNativeVisualCalc
{
    /// <summary>
    /// The name of the underlying query language that is used to define Expression (i.e., "Dax").
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Language", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Language { get; set; } = "dax";

    /// <summary>
    /// The expression to be evaluated.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Expression { get; set; } = default!;

    /// <summary>
    /// The name of the calculation
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; } = default!;

    /// <summary>
    /// The data type of visual calculation
    /// </summary>
    [Newtonsoft.Json.JsonProperty("DataType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public QueryNativeVisualCalcDataType? DataType { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QuerySparklineDataExpression")]
public partial class QuerySparklineDataExpression
{
    /// <summary>
    /// The measure to compute sparkline data for.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Measure { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// The granularity at which to evaluate the measure.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Groupings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<QueryExpressionContainer> Groupings { get; set; } = new System.Collections.ObjectModel.Collection<QueryExpressionContainer>();

    /// <summary>
    /// Number of points per sparkline
    /// </summary>
    [Newtonsoft.Json.JsonProperty("PointsPerSparkline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double? PointsPerSparkline { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryTransformOutputRoleRefExpression")]
public partial class QueryTransformOutputRoleRefExpression
{
    /// <summary>
    /// The Role of the target column.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Role", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Role { get; set; } = default!;

    /// <summary>
    /// The Name of the target Transform. This must be omitted when used to define a column in the output table of a Transform.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Transform", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string? Transform { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryTransformTableRefExpression")]
public partial class QueryTransformTableRefExpression
{
    /// <summary>
    /// The Name of the target table.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Source { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryFilteredEvalExpression")]
public partial class QueryFilteredEvalExpression
{
    /// <summary>
    /// The expression over which the condition applies. Must be a scalar.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Expression { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// List of filters to apply to the measure.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Filters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<QueryFilter> Filters { get; set; } = new System.Collections.ObjectModel.Collection<QueryFilter>();


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryScopedEvalExpression")]
public partial class QueryScopedEvalExpression
{
    /// <summary>
    /// Expression to evaluate in the new scope.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Expression { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// Set of expressions defining the new scope.  These expressions can only be Columns.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<QueryExpressionContainer> Scope { get; set; } = new System.Collections.ObjectModel.Collection<QueryExpressionContainer>();


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryFloorExpression")]
public partial class QueryFloorExpression
{
    /// <summary>
    /// Expression to round
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Expression { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// Describes the desired multiple for rounding.
    /// <br/>- TimeUnit is specified: the expression is rounded to a Size multiples of the specified TimeUnit.
    /// <br/>- TimeUnit is omitted: the expression is rounded to a multiple of Size.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Size { get; set; } = default!;

    /// <summary>
    /// The desired unit of rounding for Date/Time values.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("TimeUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryFloorExpressionTimeUnit? TimeUnit { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryArithmeticExpression")]
public partial class QueryArithmeticExpression
{
    /// <summary>
    /// First operand expression
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Left", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Left { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// Second operand expression
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Right", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Right { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// The arithmetic operation to perform
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Operator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ArithmeticOperatorKind Operator { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:ArithmeticOperatorKind")]
public enum ArithmeticOperatorKind
{

    /// <summary>Add</summary>
    _0 = 0,

    /// <summary>Subtract</summary>
    _1 = 1,

    /// <summary>Multiple</summary>
    _2 = 2,

    /// <summary>Divide</summary>
    _3 = 3,

}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryAnyValueExpression")]
public partial class QueryAnyValueExpression
{
    /// <summary>
    /// When true, any interaction with the a model-specified default value override results in all attribute relationship path ancestors being overridden.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("DefaultValueOverridesAncestors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? DefaultValueOverridesAncestors { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryDefaultValueExpression")]
public partial class QueryDefaultValueExpression
{

}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryNowExpression")]
public partial class QueryNowExpression
{

}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryDateAddExpression")]
public partial class QueryDateAddExpression
{
    /// <summary>
    /// Number of units to add to the date.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Amount { get; set; } = default!;

    /// <summary>
    /// Unit of time to add to the date.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("TimeUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public TimeUnit TimeUnit { get; set; } = default!;

    /// <summary>
    /// Expression to which to add.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Expression { get; set; } = new QueryExpressionContainer();


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:TimeUnit")]
public enum TimeUnit
{

    /// <summary>Day</summary>
    _0 = 0,

    /// <summary>Week</summary>
    _1 = 1,

    /// <summary>Month</summary>
    _2 = 2,

    /// <summary>Year</summary>
    _3 = 3,

    /// <summary>Decade</summary>
    _4 = 4,

    /// <summary>Second</summary>
    _5 = 5,

    /// <summary>Minute</summary>
    _6 = 6,

    /// <summary>Hour</summary>
    _7 = 7,

}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryDateSpanExpression")]
public partial class QueryDateSpanExpression
{
    /// <summary>
    /// Unit of time used for datespan function.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("TimeUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public TimeUnit TimeUnit { get; set; } = default!;

    /// <summary>
    /// Expression to which to apply the datespan function.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Expression { get; set; } = new QueryExpressionContainer();


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryLiteralExpression")]
public partial class QueryLiteralExpression
{
    /// <summary>
    /// The value of the literal.
    /// <br/>- Boolean: "true"
    /// <br/>- DateTime: "datetime'YYYY-MM-DDThh:mm:ss.ffffff"
    /// <br/>- Decimal: "2.4M"
    /// <br/>- Double: "2.4D"
    /// <br/>- Integer: "24L"
    /// <br/>- Number: ""
    /// <br/>- Null: "null"
    /// <br/>- String: "some string value"
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Value { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryExistsExpression")]
public partial class QueryExistsExpression
{
    /// <summary>
    /// Expression to verify there exists at least one instance of. Must be a SourceRef expression.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Expression { get; set; } = new QueryExpressionContainer();


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryStartsWithExpression")]
public partial class QueryStartsWithExpression
{
    /// <summary>
    /// First expression to which to apply the operator.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Left", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Left { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// Second expression to which to apply the operator.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Right", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Right { get; set; } = new QueryExpressionContainer();


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryContainsExpression")]
public partial class QueryContainsExpression
{
    /// <summary>
    /// First expression to which to apply the operator.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Left", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Left { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// Second expression to which to apply the operator.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Right", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Right { get; set; } = new QueryExpressionContainer();


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryNotExpression")]
public partial class QueryNotExpression
{
    /// <summary>
    /// Expression to negate. Must be an expression that evaluates to a boolean value.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Expression { get; set; } = new QueryExpressionContainer();


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryComparisonExpression")]
public partial class QueryComparisonExpression
{
    /// <summary>
    /// Type of the comparison.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ComparisonKind", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryComparisonKind ComparisonKind { get; set; } = default!;

    /// <summary>
    /// First expression to which to apply the operator.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Left", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Left { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// Second expression to which to apply the operator.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Right", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Right { get; set; } = new QueryExpressionContainer();


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryComparisonKind")]
public enum QueryComparisonKind
{

    /// <summary>Equal</summary>
    _0 = 0,

    /// <summary>GreaterThan</summary>
    _1 = 1,

    /// <summary>GreaterThanOrEqual</summary>
    _2 = 2,

    /// <summary>LessThan</summary>
    _3 = 3,

    /// <summary>LessThanOrEqual</summary>
    _4 = 4,

}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryBinaryExpression")]
public partial class QueryBinaryExpression
{
    /// <summary>
    /// First expression to which to apply the operator.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Left", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Left { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// Second expression to which to apply the operator.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Right", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Right { get; set; } = new QueryExpressionContainer();


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryInExpression")]
public partial class QueryInExpression
{
    /// <summary>
    /// The tuple of expressions to compare.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expressions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<QueryExpressionContainer> Expressions { get; set; } = new System.Collections.ObjectModel.Collection<QueryExpressionContainer>();

    /// <summary>
    /// The tuples of values to compare with the expressions.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<QueryExpressionContainer>>? Values { get; set; } = default!;

    /// <summary>
    /// An expression, which must be a SourceRef, holding a table to compare against the Expressions.
    /// <br/>The number of columns in the table must match the number of Expressions.
    /// <br/>Each row in the table is considered a tuple to be matched against the expressions.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Table", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryExpressionContainer? Table { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryBetweenExpression")]
public partial class QueryBetweenExpression
{
    /// <summary>
    /// Expression to compare.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Expression { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// Lower (inclusive) bound for the value of the expression.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("LowerBound", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer LowerBound { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// Upper (inclusive) bound for the value of the expression.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("UpperBound", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer UpperBound { get; set; } = new QueryExpressionContainer();


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryDiscretizeExpression")]
public partial class QueryDiscretizeExpression
{
    /// <summary>
    /// The expression to be discretized.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Expression { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// The number of discrete values to result from the transformation.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Count { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QuerySubqueryExpression")]
public partial class QuerySubqueryExpression
{
    /// <summary>
    /// The query to evaluate.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Query", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryDefinition Query { get; set; } = new QueryDefinition();


}

/// <summary>
/// Defines a query to be executed.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryDefinition")]
public partial class QueryDefinition
{
    /// <summary>
    /// Version of the query
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double? Version { get; set; } = default!;

    /// <summary>
    /// Set of tables from which the data will be picked.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("From", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<EntitySource> From { get; set; } = new System.Collections.ObjectModel.Collection<EntitySource>();

    /// <summary>
    /// Set of filters to apply to the data.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Where", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<QueryFilter>? Where { get; set; } = default!;

    /// <summary>
    /// List of expressions over which to sort the results.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("OrderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<QuerySortClause>? OrderBy { get; set; } = default!;

    /// <summary>
    /// List of expressions to display in the results.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Select", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<QueryExpressionContainer> Select { get; set; } = new System.Collections.ObjectModel.Collection<QueryExpressionContainer>();

    /// <summary>
    /// Provides metadata information about the structure and state of the visualization.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("VisualShape", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Axis>? VisualShape { get; set; } = default!;

    /// <summary>
    /// List of expressions that represent the items to group by.
    /// <br/>These additional groupings can be columns that we don't project or entity tables.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("GroupBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<QueryExpressionContainer>? GroupBy { get; set; } = default!;

    /// <summary>
    /// List of table manipulation operations to apply within the query.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Transform", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<QueryTransform>? Transform { get; set; } = default!;

    /// <summary>
    /// When specified, the query will return up to the specified number of rows based on the specified OrderBy.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Top", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double? Top { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryTransform")]
public partial class QueryTransform
{
    /// <summary>
    /// The name used to refer to this transform in other parts of the query.
    /// <br/>This name must be unique across all other Transform.Name values in this query.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; } = default!;

    /// <summary>
    /// The algorithm to apply.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Algorithm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Algorithm { get; set; } = default!;

    /// <summary>
    /// Describes the information needed to invoke the transform.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Input", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryTransformInput Input { get; set; } = new QueryTransformInput();

    /// <summary>
    /// Describes the expected results from the invoked transform.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Output", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryTransformOutput Output { get; set; } = new QueryTransformOutput();


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryTransformOutput")]
public partial class QueryTransformOutput
{
    /// <summary>
    /// The structure of the data produced by the transform.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Table", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryTransformTable? Table { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryTransformTable")]
public partial class QueryTransformTable
{
    /// <summary>
    /// Name by which the transform is referenced in the query.
    /// <br/>This name must be unique across all other TransformTable.Name values in the query.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; } = default!;

    /// <summary>
    /// The columns that make up this table.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Columns", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<QueryTransformTableColumn> Columns { get; set; } = new System.Collections.ObjectModel.Collection<QueryTransformTableColumn>();


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryTransformTableColumn")]
public partial class QueryTransformTableColumn
{
    /// <summary>
    /// An arbitrary string used to identify this column to the transform algorithm.  Role may not be unique.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string? Role { get; set; } = default!;

    /// <summary>
    /// The expression defining this column. ExpressionContainer.Name property defines the name of the column.
    /// <br/>ExpressionContainer.Name is required and must be unique across all other columns in this table.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Expression { get; set; } = new QueryExpressionContainer();


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryTransformInput")]
public partial class QueryTransformInput
{
    /// <summary>
    /// Parameters to be supplied when invoking the algorithm
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<QueryExpressionContainer> Parameters { get; set; } = new System.Collections.ObjectModel.Collection<QueryExpressionContainer>();

    /// <summary>
    /// The structure of the table of data passed to the transform.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Table", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryTransformTable? Table { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:Axis")]
public partial class Axis
{
    /// <summary>
    /// Ordered list of hierarchical groupings in this axis.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Groups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<AxisGroup> Groups { get; set; } = new System.Collections.ObjectModel.Collection<AxisGroup>();

    /// <summary>
    /// Name by which the axis is referenced in the query.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:AxisGroup")]
public partial class AxisGroup
{
    /// <summary>
    /// List of expressions that define the keys of this group.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Keys", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<QueryExpressionContainer> Keys { get; set; } = new System.Collections.ObjectModel.Collection<QueryExpressionContainer>();

    [Newtonsoft.Json.JsonProperty("Subtotal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Subtotal { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QuerySortClause")]
public partial class QuerySortClause
{
    /// <summary>
    /// Expression over which to sort the results.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Expression { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// Indicates the direction to sort.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Direction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public Newtonsoft.Json.Linq.JToken Direction { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:EntitySource")]
public partial class EntitySource
{
    /// <summary>
    /// Name by which the table is referenced in the query
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; } = default!;

    /// <summary>
    /// Reference name of the table in the data.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Entity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string? Entity { get; set; } = default!;

    /// <summary>
    /// Identifier for the schema which contains the entity source.  This can be omitted if the Schema name is the default.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Schema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string? Schema { get; set; } = default!;

    /// <summary>
    /// An expression that produces a table. Mandatory if Type is Expression.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryExpressionContainer? Expression { get; set; } = default!;

    /// <summary>
    /// Type of entity source - defaults to Table (0)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EntitySourceType? Type { get; set; } = EntitySourceType._0;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryPropertyVariationSourceExpression")]
public partial class QueryPropertyVariationSourceExpression
{
    /// <summary>
    /// Reference to the source property containing the property variation source. Must be a SourceRef expression.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Expression { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// The name of the target variation source in the property.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; } = default!;

    /// <summary>
    /// The name of the target property in the SourceRef.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Property", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Property { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryHierarchyLevelExpression")]
public partial class QueryHierarchyLevelExpression
{
    /// <summary>
    /// Reference to the hierarchy containing the level. Must be a Hierarchy expression.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Expression { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// The name of the target level in the hierarchy.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Level { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryHierarchyExpression")]
public partial class QueryHierarchyExpression
{
    /// <summary>
    /// Reference to the source table containing the hierarchy. Must be a SourceRef or a PropertyVariationSource expression.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Expression { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// The name of the target hierarchy in the source.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Hierarchy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Hierarchy { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryPercentileExpression")]
public partial class QueryPercentileExpression
{
    /// <summary>
    /// The expression to be evaluated for the percentile.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Expression { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// The desired percentile value.
    /// <br/>- Exclusive is true: K must be between 0 and 1, exclusive.
    /// <br/>- Exclusive is false: K must be between 0 and 1, inclusive.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("K", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double K { get; set; } = default!;

    /// <summary>
    /// Indicates whether an inclusive or exclusive percentile should be computed.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Exclusive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? Exclusive { get; set; } = false;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryAggregationExpression")]
public partial class QueryAggregationExpression
{
    /// <summary>
    /// Type of the aggregation.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Function", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public QueryAggregateFunction Function { get; set; } = default!;

    /// <summary>
    /// Expression to aggregate.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Expression { get; set; } = new QueryExpressionContainer();


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryAggregateFunction")]
public enum QueryAggregateFunction
{

    /// <summary>Sum</summary>
    _0 = 0,

    /// <summary>Average</summary>
    _1 = 1,

    /// <summary>Distinct count</summary>
    _2 = 2,

    /// <summary>Min</summary>
    _3 = 3,

    /// <summary>Max</summary>
    _4 = 4,

    /// <summary>Count number of non-null values</summary>
    _5 = 5,

    /// <summary>Median</summary>
    _6 = 6,

    /// <summary>StandardDeviation</summary>
    _7 = 7,

    /// <summary>Variance</summary>
    _8 = 8,

}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryMaxExpression")]
public partial class QueryMaxExpression
{
    /// <summary>
    /// Defines how variant types should be treated.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("IncludeAllTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public IncludeAllTypes IncludeAllTypes { get; set; } = default!;

    /// <summary>
    /// Expression whose min will be computed.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Expression { get; set; } = new QueryExpressionContainer();


}

/// <summary>
/// Argument for QueryMinExpression and QueryMaxExpression to decide behavior for variant types.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:IncludeAllTypes")]
public enum IncludeAllTypes
{

    /// <summary>Exclude non-numeric types if the Expression returns mixed typed values.</summary>
    _0 = 0,

    /// <summary>Include non-numeric types if the Expression returns mixed typed values if the model supports it. otherwise, fallback to Default behavior.</summary>
    _1 = 1,

    /// <summary>Include non-numeric types if the Expression returns mixed typed value. raise an error if the model does not support this.</summary>
    _2 = 2,

}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryMinExpression")]
public partial class QueryMinExpression
{
    /// <summary>
    /// Defines how variant types should be treated.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("IncludeAllTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public IncludeAllTypes IncludeAllTypes { get; set; } = default!;

    /// <summary>
    /// Expression whose min will be computed.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Expression { get; set; } = new QueryExpressionContainer();


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryMeasureExpression")]
public partial class QueryMeasureExpression
{
    /// <summary>
    /// Reference to the source table containing the property. Must be a SourceRef, PropertyVariationSource, or TransformTableRef expression.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Expression { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// The name of the target property in the source.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Property", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Property { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryColumnExpression")]
public partial class QueryColumnExpression
{
    /// <summary>
    /// Reference to the source table containing the property. Must be a SourceRef, PropertyVariationSource, or TransformTableRef expression.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required]
    public QueryExpressionContainer Expression { get; set; } = new QueryExpressionContainer();

    /// <summary>
    /// The name of the target property in the source.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Property", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Property { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QuerySourceRefExpression")]
public partial class QuerySourceRefExpression
{
    /// <summary>
    /// Name of the source table in a query.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Source { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:StandaloneSourceRefExpression")]
public partial class StandaloneSourceRefExpression
{
    /// <summary>
    /// The name of the schema containing the referenced entity - can be omitted if optional.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Schema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string? Schema { get; set; } = default!;

    /// <summary>
    /// Name of the referenced entity from your data.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Entity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Entity { get; set; } = default!;


}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryNativeVisualCalc/DataType")]
public enum QueryNativeVisualCalcDataType
{

    [System.Runtime.Serialization.EnumMember(Value = @"Binary")]
    Binary = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Boolean")]
    Boolean = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"Date")]
    Date = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"DateTime")]
    DateTime = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"DateTimeZone")]
    DateTimeZone = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"Decimal")]
    Decimal = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"Double")]
    Double = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"Duration")]
    Duration = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"Integer")]
    Integer = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"Json")]
    Json = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"None")]
    None = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"Null")]
    Null = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"Text")]
    Text = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"Time")]
    Time = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"Variant")]
    Variant = 14,

}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:QueryFloorExpression/TimeUnit")]
public enum QueryFloorExpressionTimeUnit
{

    /// <summary>Day</summary>
    _0 = 0,

    /// <summary>Week</summary>
    _1 = 1,

    /// <summary>Month</summary>
    _2 = 2,

    /// <summary>Year</summary>
    _3 = 3,

    /// <summary>Decade</summary>
    _4 = 4,

    /// <summary>Second</summary>
    _5 = 5,

    /// <summary>Minute</summary>
    _6 = 6,

    /// <summary>Hour</summary>
    _7 = 7,

}

[System.CodeDom.Compiler.GeneratedCode("FabricTools.Items.CodeGeneration", "1.1.0-62+Branch.main.Sha.20b425801c5e5ce25afea6ff55befe43818af959.20b425801c5e5ce25afea6ff55befe43818af959, NJsonSchema: 11.2.0.0 (Newtonsoft.Json v13.0.0.0)")]
[FabricTools.Items.ComponentModel.SourceSchema("https://developer.microsoft.com/json-schemas/fabric/item/report/definition/semanticQuery/1.2.0/schema.json", "definitions:EntitySource/Type")]
public enum EntitySourceType
{

    /// <summary>The EntitySource is a reference to a table in the underlying model.</summary>
    _0 = 0,

    /// <summary>The EntitySource is a presentation data object such as a report page or visual.</summary>
    _1 = 1,

    /// <summary>The EntitySource is a table produced by the specified expression.</summary>
    _2 = 2,

}